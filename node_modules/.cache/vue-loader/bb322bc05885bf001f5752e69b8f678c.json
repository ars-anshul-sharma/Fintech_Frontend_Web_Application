{"remainingRequest":"/Users/ar-ashutosh.a.singh/Desktop/MyVueProj/card-apply/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/ar-ashutosh.a.singh/Desktop/MyVueProj/card-apply/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ar-ashutosh.a.singh/Desktop/MyVueProj/card-apply/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ar-ashutosh.a.singh/Desktop/MyVueProj/card-apply/src/components/Step1/AboutFamily1.vue?vue&type=template&id=793d193a&","dependencies":[{"path":"/Users/ar-ashutosh.a.singh/Desktop/MyVueProj/card-apply/src/components/Step1/AboutFamily1.vue","mtime":1624719931071},{"path":"/Users/ar-ashutosh.a.singh/Desktop/MyVueProj/card-apply/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ar-ashutosh.a.singh/Desktop/MyVueProj/card-apply/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/ar-ashutosh.a.singh/Desktop/MyVueProj/card-apply/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ar-ashutosh.a.singh/Desktop/MyVueProj/card-apply/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}